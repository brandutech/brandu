{"ast":null,"code":"import _slicedToArray from\"/Users/francocastromiranda/dubai/teste/brandu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useCallback}from\"react\";import{Dialog,DialogContent,DialogActions,Button,Box,withStyles}from\"@material-ui/core\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var styles=function styles(theme){return{dialogPaper:{maxWidth:\"\".concat(theme.breakpoints.values.md,\"px !important\")},dialogContent:{paddingTop:theme.spacing(2),paddingRight:theme.spacing(2),paddingLeft:theme.spacing(2)}};};function ImageCropperDialog(props){var ImageCropper=props.ImageCropper,classes=props.classes,onClose=props.onClose,open=props.open,src=props.src,onCrop=props.onCrop,aspectRatio=props.aspectRatio,theme=props.theme;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),crop=_useState2[0],setCrop=_useState2[1];var getCropFunctionFromChild=useCallback(function(cropFunction){setCrop(function(){return cropFunction;});},[setCrop]);return/*#__PURE__*/_jsxs(Dialog,{open:open,onEscapeKeyDown:onClose,classes:{paper:classes.dialogPaper},style:{overflowX:\"visible\"},children:[/*#__PURE__*/_jsx(DialogContent,{className:classes.dialogContent,children:/*#__PURE__*/_jsx(ImageCropper,{src:src,setCropFunction:getCropFunctionFromChild,onCrop:onCrop,aspectRatio:aspectRatio,color:theme.palette.primary.main})}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Box,{mr:1,children:/*#__PURE__*/_jsx(Button,{onClick:onClose,children:\"Close\"})}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"secondary\",onClick:crop,children:\"Crop\"})]})]});}export default withStyles(styles,{withTheme:true})(ImageCropperDialog);","map":{"version":3,"sources":["/Users/francocastromiranda/dubai/teste/brandu/src/shared/components/ImageCropperDialog.js"],"names":["React","useState","useCallback","Dialog","DialogContent","DialogActions","Button","Box","withStyles","styles","theme","dialogPaper","maxWidth","breakpoints","values","md","dialogContent","paddingTop","spacing","paddingRight","paddingLeft","ImageCropperDialog","props","ImageCropper","classes","onClose","open","src","onCrop","aspectRatio","crop","setCrop","getCropFunctionFromChild","cropFunction","paper","overflowX","palette","primary","main","withTheme"],"mappings":"oKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,WAA1B,KAA6C,OAA7C,CAEA,OACEC,MADF,CAEEC,aAFF,CAGEC,aAHF,CAIEC,MAJF,CAKEC,GALF,CAMEC,UANF,KAOO,mBAPP,C,wFASA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,QAAY,CACzBC,WAAW,CAAE,CAAEC,QAAQ,WAAKF,KAAK,CAACG,WAAN,CAAkBC,MAAlB,CAAyBC,EAA9B,iBAAV,CADY,CAEzBC,aAAa,CAAE,CACbC,UAAU,CAAEP,KAAK,CAACQ,OAAN,CAAc,CAAd,CADC,CAEbC,YAAY,CAAET,KAAK,CAACQ,OAAN,CAAc,CAAd,CAFD,CAGbE,WAAW,CAAEV,KAAK,CAACQ,OAAN,CAAc,CAAd,CAHA,CAFU,CAAZ,EAAf,CASA,QAASG,CAAAA,kBAAT,CAA4BC,KAA5B,CAAmC,CACjC,GACEC,CAAAA,YADF,CASID,KATJ,CACEC,YADF,CAEEC,OAFF,CASIF,KATJ,CAEEE,OAFF,CAGEC,OAHF,CASIH,KATJ,CAGEG,OAHF,CAIEC,IAJF,CASIJ,KATJ,CAIEI,IAJF,CAKEC,GALF,CASIL,KATJ,CAKEK,GALF,CAMEC,MANF,CASIN,KATJ,CAMEM,MANF,CAOEC,WAPF,CASIP,KATJ,CAOEO,WAPF,CAQEnB,KARF,CASIY,KATJ,CAQEZ,KARF,CAUA,cAAwBT,QAAQ,CAAC,IAAD,CAAhC,wCAAO6B,IAAP,eAAaC,OAAb,eAEA,GAAMC,CAAAA,wBAAwB,CAAG9B,WAAW,CAC1C,SAAC+B,YAAD,CAAkB,CAChBF,OAAO,CAAC,iBAAME,CAAAA,YAAN,EAAD,CAAP,CACD,CAHyC,CAI1C,CAACF,OAAD,CAJ0C,CAA5C,CAOA,mBACE,MAAC,MAAD,EACE,IAAI,CAAEL,IADR,CAEE,eAAe,CAAED,OAFnB,CAGE,OAAO,CAAE,CAAES,KAAK,CAAEV,OAAO,CAACb,WAAjB,CAHX,CAIE,KAAK,CAAE,CAAEwB,SAAS,CAAE,SAAb,CAJT,wBAME,KAAC,aAAD,EAAe,SAAS,CAAEX,OAAO,CAACR,aAAlC,uBACE,KAAC,YAAD,EACE,GAAG,CAAEW,GADP,CAEE,eAAe,CAAEK,wBAFnB,CAGE,MAAM,CAAEJ,MAHV,CAIE,WAAW,CAAEC,WAJf,CAKE,KAAK,CAAEnB,KAAK,CAAC0B,OAAN,CAAcC,OAAd,CAAsBC,IAL/B,EADF,EANF,cAeE,MAAC,aAAD,yBACE,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,uBACE,KAAC,MAAD,EAAQ,OAAO,CAAEb,OAAjB,mBADF,EADF,cAIE,KAAC,MAAD,EAAQ,OAAO,CAAC,WAAhB,CAA4B,KAAK,CAAC,WAAlC,CAA8C,OAAO,CAAEK,IAAvD,kBAJF,GAfF,GADF,CA0BD,CAYD,cAAetB,CAAAA,UAAU,CAACC,MAAD,CAAS,CAAE8B,SAAS,CAAE,IAAb,CAAT,CAAV,CAAwClB,kBAAxC,CAAf","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogActions,\n  Button,\n  Box,\n  withStyles,\n} from \"@material-ui/core\";\n\nconst styles = (theme) => ({\n  dialogPaper: { maxWidth: `${theme.breakpoints.values.md}px !important` },\n  dialogContent: {\n    paddingTop: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n  },\n});\n\nfunction ImageCropperDialog(props) {\n  const {\n    ImageCropper,\n    classes,\n    onClose,\n    open,\n    src,\n    onCrop,\n    aspectRatio,\n    theme,\n  } = props;\n  const [crop, setCrop] = useState(null);\n\n  const getCropFunctionFromChild = useCallback(\n    (cropFunction) => {\n      setCrop(() => cropFunction);\n    },\n    [setCrop]\n  );\n\n  return (\n    <Dialog\n      open={open}\n      onEscapeKeyDown={onClose}\n      classes={{ paper: classes.dialogPaper }}\n      style={{ overflowX: \"visible\" }}\n    >\n      <DialogContent className={classes.dialogContent}>\n        <ImageCropper\n          src={src}\n          setCropFunction={getCropFunctionFromChild}\n          onCrop={onCrop}\n          aspectRatio={aspectRatio}\n          color={theme.palette.primary.main}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Box mr={1}>\n          <Button onClick={onClose}>Close</Button>\n        </Box>\n        <Button variant=\"contained\" color=\"secondary\" onClick={crop}>\n          Crop\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nImageCropperDialog.propTypes = {\n  ImageCropper: PropTypes.elementType,\n  classes: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  onCrop: PropTypes.func.isRequired,\n  src: PropTypes.string,\n  aspectRatio: PropTypes.number,\n};\n\nexport default withStyles(styles, { withTheme: true })(ImageCropperDialog);\n"]},"metadata":{},"sourceType":"module"}